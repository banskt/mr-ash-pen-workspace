?bs
??bs
require(stats)
women$height
x = women$height
bs(x, df = 7)
bs(x, df = 2)
stats:bs(x, df = 2)
library(stats)
stats:bs(x, df = 2)
?bs
??bs
stats::bs(x, df = 2)
splines::bs(x, df = 2)
splines::bs(x, df = 5)
len(x)
length(x)
splines::bs(x, df = 15)
splines::bs(x, df = 20)
splines::splineDesign(1:3, 1:3, ord = 0)
splines::splineDesign(1:3, 1:3, ord = 1)
splines::splineDesign(1:3, 1:3, ord = 2)
?splines
library(help = "splines")
??ns
?splines::ns
require("reticulate")
library(dscrutils)
library("dscrutils")
install.packages("reticulate")
reticulate::py_load_object('equicorrgauss_1.pkl')
n
data <- reticulate::py_load_object('equicorrgauss_1.pkl')
names(data)
data$X
data$y
names(data)
load("Documents/work/sparse-regression/mr-ash-penalized/gradvi-experiments/dsc/functions/fit.R")
source("Documents/work/sparse-regression/mr-ash-penalized/gradvi-experiments/dsc/functions/fit.R")
lasso_res <- fit_lasso(data$X, data$y)
lasso_res <- fit_lasso(data$X, as.vector(data$y))
names(lasso_res)
lasso_res$fit
lasso_res$mu
lasso_res$beta
beta_lasso  <- lasso_res$beta
mu_lasso <- lasso_res$mu
absolute.order(beta_lasso)
mr.ash.alpha::absolute.order(beta_lasso)
beta_lasso[mr.ash.alpha::absolute.order(beta_lasso)]
lasso_res$mu + data$X %*% lasso_res$beta
drop(lasso_res$mu + data$X %*% lasso_res$beta)
y_pred <- drop(lasso_res$mu + data$X %*% lasso_res$beta)
(y - y_pred)**2
(as.vector(data$y) - y_pred)**2
var(y, y_pred)
var(data$y, y_pred)
data$se
sqrt(var(data$y, y_pred))
mean(data$y - y_pred)
var(data$y - y_pred)
sqrt(var(data$y - y_pred))
lasso_res   <- fit_lasso(X, as.vector(y), cvlambda = "1se")
X <- data$X
y <- data$y
lasso_res   <- fit_lasso(X, as.vector(y), cvlambda = "1se")
init_beta   <- lasso_res$beta
init_sigma2 <- var(as.vector(y) - drop(lasso_res$mu + X %*% init_beta))
out <- fit_mr_ash(X, as.vector(y), sa2 = grid, init_pi = init_pi, init_beta = init_beta, init_sigma2 = init_sigma2)
grid <- (2^((0:19)/20) - 1)^2
grid
init_pi <- NULL
out <- fit_mr_ash(X, as.vector(y), sa2 = grid, init_pi = init_pi, init_beta = init_beta, init_sigma2 = init_sigma2)
names(out)
out$mu
out$beta
drop(out$beta)
absolute.order(out$beta)
mr.ash.alpha::absolute.order(out$beta)
mr.ash.alpha::absolute.order(init_beta)
as.vector(y) - drop(lasso_res$mu + X %*% init_beta)
mean((as.vector(y) - drop(lasso_res$mu + X %*% init_beta))**2)
mean((as.vector(y) - drop(out$mu + X %*% out$beta))**2)
log10(0.87)
names(data)
out2 <- fit_mr_ash(X, as.vector(y), sa2 = grid, init_pi = init_pi, init_beta = data$beta, init_sigma2 = data$se ** 2)
mean((as.vector(y) - drop(out2$mu + X %*% out2$beta))**2)
log10(0.873239)
library("dscrutils")
getwd()
setwd("/home/saikat/Documents/work/packages/python/dsc-fork/")
getwd()
devtools::install_local("dscrutils")
getwd()
setwd("/home/saikat/Documents/work/sparse-regression/mr-ash-penalized/notebooks/simulation_setup/")
dsc_outdir <- "/home/saikat/Documents/work/sparse-regression/mr-ash-penalized/notebooks/simulation_setup/trial"
get_input_modules <- function (x, s, cmark) {
xnew <- gsub(cmark, "$", x)
return (c(strsplit(xnew, s)[[1]]))
}
dsc_outdir <- "/home/saikat/Documents/work/sparse-regression/mr-ash-penalized/notebooks/simulation_setup/trial"
separator <- "::"
cmarker <- "##"
target_str <- 'simulate::simulate.dims::simulate.se::simulate.rho::simulate.sfix::simulate.pve::fit::fit.DSC_TIME::mse.err::coef_mse.err'
targets <- get_input_modules(target_str, separator, cmarker)
targets
dscout <- dscrutils::dscquery(dsc.outdir = dsc_outdir, targets = targets)
dscout
dscout[dscout['fit'] == 'gradvi_direct']
data.frame(dscout[dscout['fit'] == 'gradvi_direct'])
dscout[dscout['fit'] == 'gradvi_direct',]
targets
#target_str <- 'simulate::simulate.dims::simulate.se::simulate.rho::simulate.sfix::simulate.pve::fit::fit.DSC_TIME::mse.err::coef_mse.err'
#targets <- get_input_modules(target_str, separator, cmarker)
targets <- c("simulate", "simulate.dims", "simulate.se", "simulate.rho", "simulate.sfix", "simulate.pve", "fit",
"fit.DSC_TIME", "mse.err", "coef_mse.err")
